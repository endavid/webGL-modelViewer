precision mediump float;
uniform sampler2D sampler;
uniform vec3 lightDirection;
uniform vec4 lightIrradiance;
varying vec2 vUV;
varying vec3 vNormal;
varying vec3 worldPosition;
varying vec3 cameraPosition;
varying vec4 vertexColor;
void main(void) {
  vec4 albedo = texture2D(sampler, vUV);
  float incidentCos = dot(lightDirection, vNormal);
  vec3 viewDirection = normalize(cameraPosition - worldPosition);
  vec3 halfVector = normalize(viewDirection + lightDirection);
  float hnCos = clamp(dot(vNormal, halfVector), 0.0, 1.0);
  float specPower = 4.0;
  float brdf = 0.125 * (specPower + 8.0) * pow(hnCos, specPower);
  vec3 fresnelColor = 0.4 * (1.0 - albedo.rgb);
  float fresnelPower = 2.0;
  vec3 fresnel = fresnelColor * pow(1.0 - hnCos, fresnelPower);
  vec3 specularColor = vec3(0.6, 0.6, 0.6);
  vec3 specular = brdf * specularColor * incidentCos + fresnel;
  vec3 ambientColor = vec3(0.1,0.1,0.1);
  vec3 direct = albedo.rgb * incidentCos * incidentCos + specular;
  vec4 color = vec4(direct * lightIrradiance.rgb + ambientColor, albedo.a * lightIrradiance.a);
  gl_FragColor = color;
  //gl_FragColor.rgb = vertexColor.rgb;
  //vec4 lines = 1.0 / clamp(255.0 * vertexColor, 0.01, 255.0);
  //float line = max(lines.r, max(lines.g, lines.b));
  //gl_FragColor.rgb = lines.rgb;
  //gl_FragColor.rgb = vec3(line, line, line);
  //gl_FragColor = albedo;
  //gl_FragColor = vec4(vNormal, 1.0);
  //gl_FragColor = vec4(vUV, 0, 1);
  //gl_FragColor = vec4(worldPosition, 1.0);
  //gl_FragColor = vec4(cameraPosition, 1.0);
  //gl_FragColor = vec4(hnCos, hnCos, hnCos, 1.0);
  //gl_FragColor = vec4(brdf, brdf, brdf, 1.0);
  //gl_FragColor = vec4(fresnel, 1.0);
}
